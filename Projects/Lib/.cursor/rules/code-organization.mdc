---
description: 
globs: 
alwaysApply: true
---
Code Organization & Exports

Directory Structure

src/code: Contains all core implementation logic, types, data, and utilities. This code is considered internal to the library unless explicitly exposed via src/exports. The primary top-level directories within src/code should be:
core: For main business logic, algorithms, and core functionalities (e.g., mixing, seedManager).
data: For static data definitions, constants, and lookup tables (e.g., effects, products, transformationRules). Type definitions derived from this data belong in src/code/types.
lib: For strictly internal helper functions, classes, or modules that are implementation details of other code modules and must never be exposed as part of the library's public API via src/exports. Code within lib should only be imported by other modules within src/code.
types: All custom type aliases (type) and interface definitions (interface) must reside within this directory, mirroring the feature structure where appropriate (e.g., src/code/types/products/Product.ts, src/code/types/effects/EffectCode.ts).
utils: For reusable helper functions and utilities that don't belong to a specific core feature and might be shared across different parts of the code directory (e.g., effectUtils, productUtils). Some utils might eventually be exposed via src/exports.
src/exports: Defines the public API surface of the library. Files and folders here mirror the intended public structure of the code being exported from src/code. No file within src/exports should ever import directly from src/code/lib.
Feature-Based Subdirectories: Within the primary directories (core, data, lib, types, utils), organize further into subdirectories by feature or domain (e.g., mixing, products, effects).
Single Responsibility: Aim for one primary class, interface, function, component, etc., per file. Name the file after that primary export (e.g., ProductUtils.ts exports functions related to products). Use subfolders if a feature grows complex.

Export Strategy

Public API via src/exports: Only code intended for public use should be exposed through the src/exports directory.
Explicit Re-exports: Files within src/exports (that are not barrel files) must explicitly import members from their corresponding files in src/code/... (but never from src/code/lib/...) and re-export only the intended public members using named exports. Do not use export * from '@/code/...' in these files.
For example, a file like src/exports/core/mixing/reverse/byEffect.ts would import a function, perhaps aliasing it (e.g., internalReverse from  '@/code/core/mixing/reverse/byEffect'), and then export it under its public name (e.g., export const reverseByEffect = internalReverse;). Similarly, types needed for the public API would be imported (possibly aliased) and then re-exported.
Barrel Files (index.ts) in src/exports: Barrel files (index.ts) within the src/exports directory are used only to aggregate and re-export members from other files or sub-barrels within src/exports. They use wildcard exports (export * from './fileName'; or export * from './subDirectory';). Barrel files must never export directly from src/code.
Alias Paths: Always use the @/* alias for local project imports (pointing to src/).

Up-to-Date Exports

Ensure that when code in src/code is created or modified, the corresponding exports in src/exports are added or updated accordingly to reflect the intended public API, respecting the restriction on exporting from src/code/lib.
